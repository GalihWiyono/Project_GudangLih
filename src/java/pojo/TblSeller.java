package pojo;
// Generated 18-Oct-2020 20:19:13 by Hibernate Tools 4.3.1

import DAO.DAOBarang;
import DAO.DAOSeller;
import DAO.DAOTransaksi;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;




/**
 * TblSeller generated by hbm2java
 */
@ManagedBean
@SessionScoped
@RequestScoped
public class TblSeller  implements java.io.Serializable {
    
    FacesContext context2 = FacesContext.getCurrentInstance();
    HttpSession session = (HttpSession) context2.getExternalContext().getSession(true);

    
     private String idSeller = (String) session.getAttribute("user");
     private String password;
     private String namaSeller = (String) session.getAttribute("nama");
     private String alamatSeller;
     private String noTelp;
     private String pesan;
     private boolean gagal = false;
     private int product_seller,total_barang;

    public TblSeller() {
    }
    
    
    public TblSeller(String idSeller, String password, String namaSeller, String alamatSeller, String noTelp) {
       this.idSeller = idSeller;
       this.password = password;
       this.namaSeller = namaSeller;
       this.alamatSeller = alamatSeller;
       this.noTelp = noTelp;
    }

    public int getTotal_barang() {
        return total_barang;
    }

    public void setTotal_barang(int total_barang) {
        this.total_barang = total_barang;
    }
    
    public int getProduct_seller() {
        return product_seller;
    }

    public void setProduct_seller(int product_seller) {
        this.product_seller = product_seller;
    }

    public String getPesan() {
        return pesan;
    }

    public void setPesan(String pesan) {
        this.pesan = pesan;
    }

    public boolean isGagal() {
        return gagal;
    }

    public void setGagal(boolean gagal) {
        this.gagal = gagal;
    }
    
   
    public String getIdSeller() {
        return this.idSeller;
    }
    
    public void setIdSeller(String idSeller) {
        this.idSeller = idSeller;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getNamaSeller() {
        return this.namaSeller;
    }
    
    public void setNamaSeller(String namaSeller) {
        this.namaSeller = namaSeller;
    }
    public String getAlamatSeller() {
        return this.alamatSeller;
    }
    
    public void setAlamatSeller(String alamatSeller) {
        this.alamatSeller = alamatSeller;
    }
    public String getNoTelp() {
        return this.noTelp;
    }
    
    public void setNoTelp(String noTelp) {
        this.noTelp = noTelp;
    }
    
    //Login Logic Start
    public String validateLogin(){
        DAOSeller dao = new DAOSeller();
        List<TblSeller> list = dao.Login(idSeller, password);
         if (list != null) {
                 try{
                    idSeller = list.get(0).idSeller;
                    password = list.get(0).password;
                    namaSeller = list.get(0).namaSeller;
                    FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("user", idSeller);
                    FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("nama", namaSeller);
                    return "templateuser";
                    } catch (Exception e){
                    gagal = true;
                    idSeller = "";
                    password = "";
                    return "login";
                }
             }
            
         return "index";
    }
    //Login Logic end
    
    //Update Profile Start
    public void cariData(){
        DAOSeller dao = new DAOSeller();
        List<TblSeller> list = dao.cariId(idSeller);
        
        namaSeller = list.get(0).namaSeller;
        password = list.get(0).password;
        alamatSeller = list.get(0).alamatSeller;
        noTelp = list.get(0).noTelp;       
    }
    
    //untuk update costumer
    public String update(){
        DAOSeller dao = new DAOSeller();
        dao.updateData(this);
        namaSeller = "";
        password = "";
        alamatSeller = "";
        noTelp = "";
        FacesContext.getCurrentInstance().addMessage("validate", new FacesMessage(FacesMessage.SEVERITY_INFO, "Profile Berhasil Diupdate", null));
        return "customer";
    }
    //Update profile end
    
    
    public List<TblSeller> semuaData() {
        DAOSeller dao = new DAOSeller();
        List<TblSeller> list = dao.retrieveData();
        return list;
    }
    
    //untuk dashboard user
    @PostConstruct
    public void init() {
        DAOBarang dao = new DAOBarang();
        total_barang = dao.carirowById(idSeller);
        
        DAOTransaksi dao2 = new DAOTransaksi();
        product_seller = dao2.carirowById(idSeller);
    }
    
    //untuk register
    public void save(){
    DAOSeller dao = new DAOSeller();
    List<TblSeller> list = dao.cariId(idSeller);
        try {
            if (idSeller.equals(list.get(0).idSeller)){
                 gagal = true;
            }
        } catch (Exception e){
            dao.addseller(this);
            namaSeller = "";
            idSeller="";
            password="";
            alamatSeller="";
            noTelp="";
        }
    }
    
    //delete admin
    public String Delete(String id){
        DAOSeller dao = new DAOSeller();
        dao.deleteSeller(id);
        return "customer?faces-redirect=true";
    }
    
    // update di admin
    public String cariseler(String id){
        DAOSeller dao = new DAOSeller();
        List<TblSeller> list = dao.cariId(id);
        idSeller = list.get(0).idSeller;
        password = list.get(0).password;
        namaSeller = list.get(0).namaSeller;
        alamatSeller = list.get(0).alamatSeller;
        noTelp = list.get(0).noTelp;
        return"updatecust";
    }
    
    // untuk logout
    public void logout() {
      FacesContext context = FacesContext.getCurrentInstance();
      context.getExternalContext().invalidateSession();
         try {
            context.getExternalContext().redirect("login.xhtml");
        } catch (Exception e) {
            e.printStackTrace();
        }
     }
    
    public void logoutadmin() {
      FacesContext context = FacesContext.getCurrentInstance();
      context.getExternalContext().invalidateSession();
         try {
            context.getExternalContext().redirect("../index.xhtml");
        } catch (Exception e) {
            e.printStackTrace();
        }
     }
    
        
}


